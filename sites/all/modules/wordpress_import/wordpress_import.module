<?php
// $Id: wordpress_import.module,v 1.1.2.14.2.15 2009/10/12 21:08:13 yrocq Exp $
/**
 * @file
 * Wordpress module
 *
 * This module allow to import a blog form a WXR file generated by Worpdress
 */

/*	
  Wordpress Import Drupal module : Import a Wordpress WXR file into Drupal
  Copyright (C) 2007 Yann Rocq <yann@rocq.net> - http://www.rocq.net/yann/

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along
  with this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */

/**
 * Implementation of hook_help()
 */

function wordpress_import_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#wordpress_import":
    $output = '<p>'.  t("This module imports a WXR file generated by Wordpress blog software into Drupal") .'</p>';
    break;
  }

  return $output;
}

/**
 * Implementation of hook_menu()
 */

function wordpress_import_menu() {
  $items = array();

  $items['admin/content/wordpress_import'] = array(
    'title' => 'Wordpress import',
    'description' => 'Import Wordpress WXR file',
    'page callback' => 'wordpress_import_home',
    'access callback' => 'user_access',
    'access callback' => TRUE,
    );

  return $items;
}

/**
 * hook_perm
 *
 * @return array perms
 * @author Yann Rocq
 **/
function wordpress_import_perm() {
  return array('import wordpress blog');
}

/**
 * Implementation of hook_form()
 */

function wordpress_import_form(&$form_state = NULL) {

  // This is a multistep form
  
  if (!isset($form_state['values'])) {
    $form_state['storage']['step'] = 0;
  }

  // Skip user creation if not necessary

  if ($form_state['storage']['step'] == 3 && !empty($form_state['values']['users_map']) && !wordpress_import_must_create_users(wordpress_import_apply_default_user_mapping($form_state['values']['users_map'], $form_state['values']['default_user_mapping']))) {
    $form_state['storage']['step']++;
  }
 
  switch ($form_state['storage']['step']) {
    // Step 0 : Choose import method
    
    case 0:
      unset($_SESSION['wordpress_import']);
      
      // Initialize report variables
      
      $report_variables = array('created_users', 'created_categories', 'created_posts', 'created_comments');
      
      foreach ($report_variables as $value) {
        $_SESSION['wordpress_import']['report']['@'. $value] = 0;
      }
      
      // Build form
      
      $form['informations'] = array(
       '#value' => t('This module will import a WXR file generated by Wordpress (read the <a href="@codex">documentation</a> for more). You MUST make a backup copy of your Drupal Database before proceeding.', array('@codex' => url('http://codex.wordpress.org/Tools_Export_SubPanel')))
);
      $form['method'] = array(
        '#type' => 'radios',
        '#title' => t('Method'),
        '#default_value' => 'local',
        '#options' => array(
          'local' => t('Choose a local file on server'),
          'upload' => t('Upload a file')),
      );
      break;      
        
    // Step 1 : Upload form
    case 1:
      switch ($form_state['values']['method']) {
        case 'local':
          $wordpress_path = file_create_path('wordpress');
          file_check_directory($wordpress_path, TRUE);
          
          foreach (file_scan_directory($wordpress_path, '.*\.xml') as $file) {
            $options[$file->basename] = $file->basename;
          }
          
          $form['local'] = array(
              '#title' => t('WXR file'),
              '#type' => 'radios',
              '#description' => t('The file must be in the directory %directory/', array('%directory' => wordpress_import_directory())),
              '#required' => TRUE,
              '#options' => $options
            );
          break;
        
        default:
          $form['upload'] = array(
            '#type' => 'file',
            '#title' => t('Upload your WXR file'),
            '#size' => 40,
            '#description' => t('The file can\'t exceed %maximum megabytes', array('%maximum' => $base_path . file_upload_max_size()/1024/1024))
          );
          break;
      }
    break;
    
    // Step 2 : Options setting
    
    case 2:
    $wordpress = wordpress_import_items($_SESSION['wordpress_import']['file_path']);
    $users = wordpress_import_get_users($wordpress);
    $enable_default_user_mapping = count($users) > 5;
    
    // Users mapping

    // Default user actions

    if ($enable_default_user_mapping) {
      $form['default_user_mapping'] = array(
        '#type' => 'select',
        '#title' => t('Default user mapping'),
        '#options' => wordpress_import_drupal_users_list(FALSE),
        '#description' => t('Choose how to map Wordpress users to Drupal users by default. If you choose a user name here, all posts will be assigned to this user. You can set a specific setting for each user by extending the user mapping list below.'),
      );
    }
      
    // Users list

    $form['users_map'] = array(
      '#title' => t('Users mapping'),
      '#type' => 'fieldset',
      '#description' => t('Map each wordpress user to a drupal user.'),
      '#collapsible' => TRUE,
      '#collapsed' => $enable_default_user_mapping,
      '#tree' => TRUE
    );

    foreach ($users as $users_value) {
      $form['users_map'][$users_value] = array(
        '#type' => 'select',
        '#title' => $users_value,
        '#options' => wordpress_import_drupal_users_list($enable_default_user_mapping),
      );
    }

    foreach (taxonomy_get_vocabularies() as $vocabulary) {
      $vocabularies[$vocabulary->id] = check_plain($vocabulary->name);
    }

    // Options

    $form['options'] = array(
      '#type' => 'fieldset',
      '#title' => t('Options'),
      '#collapsible' => TRUE
    );
    
    // Blog content type
    
    $node_types = node_get_types();
    
    if ($node_types['blog']) {    
    $form['options']['blog_type'] = array(
      '#type' => 'select',
      '#title' => t('Import posts in content type'),
      '#options' => array(
          'story' => t('Story'),
          'blog' => t('Blog')
        )
      );
    }

    $form['options']['alias'] = array(
      '#type' => 'checkbox',
      '#title' => t('Create path aliases'),
      '#description' => t('This option tries to preserve the path of the wordpress original posts. It is useful only if the url of your drupal site root is the same as the wordpress site (!root) and if clean urls are activated', array('!root' => $wordpress['link']))
    );
    break;
    
    // Step 3: 
    
    case 3:
      $form['new_users'] = array('#tree' => TRUE);
      
      foreach ($_SESSION['wordpress_import']['users_map'] as $key => $value) {
        if ($value == 'create_new_user') {
          $form['new_users'][$key] = array('#type' => 'fieldset', '#title' => t('Wordpress user %user', array('%user' => $key)));
          $form['new_users'][$key]['name'] = array('#type' => 'textfield', '#title' => t('Username for Wordpress user %user', array('%user' => $key)), '#required' => TRUE, '#default_value' => $key);
          $form['new_users'][$key]['mail'] = array('#type' => 'textfield', '#title' => t('E-mail address for Wordpress user %user', array('%user' => $key)), '#required' => TRUE);
        }
      }
      break;
    
    // Step 4: 

    case 4:
      $form['submit'] = array('#value' => t('The Wordpress blog has been successfully imported (@created_users users, @created_posts posts, @created_categories categories and @created_comments comments).', $_SESSION['wordpress_import']['report']));
      break;
  }

  // Form settings
  
  if ($form_state['storage']['step'] < 4) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Next')
    );
  }
  
  $form['#attributes']['enctype'] = 'multipart/form-data';

  $form['#redirect'] = FALSE;
  
  return $form;
}

/**
 * Implementation of hook_validate()
 */

function wordpress_import_form_validate($form, &$form_state) {
  switch ($form_state['storage']['step']) {
    case 1:
      if (($_SESSION['wordpress_import']['method'] == 'upload') && !$_FILES['files']['name']['upload']) {
        form_set_error('upload', t('You must provide a WXR file.'));
      }
    break;
    case 3:
      foreach ($form_state['values']['new_users'] as $key => $value) {
        // Check user name

        if ($error = user_validate_name($value['name'])) {
          form_set_error('new_users]['. $key .'][name', $error);
        }
        elseif (user_load(array('name' => $value['name']))) {
          form_set_error('new_users]['. $key .'][name', t('User !user already exists.', array('!user' => $value['name'])));
        }
        elseif (is_array($user['name']) && in_array(strtolower($value['name']), $user['name'])) {
          form_set_error('new_users]['. $key .'][name', t('Two users have the same name (!user).', array('!user' => $value['name'])));
        }
        
        // Check user mail
        
        if ($error = user_validate_mail($value['mail'])) {
          form_set_error('new_users]['. $key .'][mail', $error);
        }
        elseif (user_load(array('mail' => $value['mail']))) {
          form_set_error('new_users]['. $key .'][mail', t('User with mail !mail already exists.', array('!mail' => $value['mail'])));
        }
        elseif (is_array($user['mail']) && in_array(strtolower($value['mail']), $user['mail'])) {
          form_set_error('new_users]['. $key .'][mail', t('Two users have the same mail (!mail).', array('!mail' => $value['mail'])));
        }
        
        $user['name'][] = strtolower($value['name']);
        $user['mail'][] = strtolower($value['mail']);
      }
      break;
  }
}

/**
 * Implementation of hook_submit()
 */

function wordpress_import_form_submit($form, &$form_state) {
  
  switch ($form_state['storage']['step']) {
    case 0:
      $_SESSION['wordpress_import']['method'] = $form_state['values']['method'];
    break;
    
    // Step 2 : upload or open
    case 1:
      $wordpress_path = file_create_path('wordpress');
      file_check_directory($wordpress_path, TRUE);
      
      if ($_SESSION['wordpress_import']['method'] == 'upload') {
        $validators = array(
            'file_validate_extensions' => array('xml')
          );
        $file_info = file_save_upload('upload', $validators, $wordpress_path .'/import.xml');
        if ($file_info) {
          $_SESSION['wordpress_import']['file_path'] = $file_info->filepath;
        }
        else {
          $form_state['storage']['step'] = 0;
        }
      }
      else {
        $file_path = $wordpress_path .'/'. $form_state['values']['local'];
        $_SESSION['wordpress_import']['file_path'] = file_check_location($file_path);
      }
    break;

    // Step 2 : import blog
    
    case 2:      
      $_SESSION['wordpress_import']['users_map'] = wordpress_import_apply_default_user_mapping($form_state['values']['users_map'], $form_state['values']['default_user_mapping']);
      $_SESSION['wordpress_import']['alias'] = $form_state['values']['alias'];
      $_SESSION['wordpress_import']['blog_type'] = $form_state['values']['blog_type'];
      
      if (!wordpress_import_must_create_users($form_state['values']['users_map'])) {
        wordpress_import_import_blog($_SESSION['wordpress_import']);
      }
    break;
    
    case 3:
      foreach ($form_state['values']['new_users'] as $key => $value) {
        $user = array('mail' => $value['mail'], 'pass' => user_password(), 'name' => $value['name'], 'status' => 1);
        $user = user_save('', $user);
        $_SESSION['wordpress_import']['report']['@created_users'] ++;
        $_SESSION['wordpress_import']['users_map'][$key] = $user->uid;
      }
      wordpress_import_import_blog($_SESSION['wordpress_import']);
    break;
  }
  
  // Store next step
  $form_state['storage']['step']++;
}

function wordpress_import_apply_default_user_mapping($user_map, $default_user_mapping) {
  foreach ($user_map as $key => &$value) {
    if ($value == 'default_user_mapping') {
      $value = $default_user_mapping;
    }
  }
  
  return $user_map;
}

function wordpress_import_must_create_users($users_map) {
  return in_array('create_new_user', $users_map);
}

/**
 * Display Wordpress import form
 */

function wordpress_import_home() {
  $output = drupal_get_form('wordpress_import_form');
  return $output;
}

/**
 * Import blog
 * @param array $params parameters
 */

function wordpress_import_import_blog($params) {
  if (!$params['blog_type']) {
    $params['blog_type'] = 'story';
  }
  
  $tag_vocabulary = array(
    'name' => t('Wordpress tag'),
    'tags' => 1,
    'nodes' => array('page' => 'page', $params['blog_type'] => $params['blog_type'])
  );
  
  $wordpress = wordpress_import_items($params['file_path']);
  $params = array_merge($params,  wordpress_import_import_categories($wordpress, $params));
  $params['tags_vocabulary'] = wordpress_import_create_vocabulary('tag', $tag_vocabulary);
  wordpress_import_posts($wordpress, $params);
  
  // Clear the cache so an anonymous poster can see the node being added or updated.
  cache_clear_all();
}

/**
 * Import categories
 * @param array $wordpress wordpress data
 * @return array categories mapping and taxonomy id
 */

function wordpress_import_import_categories($wordpress, $params) {
  // Create new taxonomy for wordpress categories
  
  $category_vocabulary_data = array(
    'name' => t('Wordpress category'),
    'hierarchy' => 2,
    'multiple' => 1,
    'nodes' => array('page' => 'page', $params['blog_type'] => $params['blog_type'])
  );

  $category_vocabulary = wordpress_import_create_vocabulary('category', $category_vocabulary_data);

  $category_mapping = wordpress_import_get_terms($category_vocabulary);

  // Import categories

  if (is_array($wordpress['categories'])) {
    foreach ($wordpress['categories'] as $key => $value) {
      $category_name = wordpress_import_get_tag($value, 'wp:cat_name');
      $category_parent = wordpress_import_get_tag($value, 'wp:category_parent');
      
      if (!$category_mapping[$category_name]) {
        $category_term = array(
          'name' => $category_name,
          'vid' => $category_vocabulary
          );
        
        if ($category_parent !== NULL && $category_parent !== '') {
          $category_term['parent'] = $category_mapping[$category_parent];
        }

        taxonomy_save_term($category_term);
        $_SESSION['wordpress_import']['report']['@created_categories']++;
        // Save mapping between Wordpress and Drupal categories

        $category_mapping[$category_name] = $category_term['tid'];
      }
    }

    return array(
      'categories_map' => $category_mapping,
      'categories_vocabulary' => $category_vocabulary
      );
  }

  // Wordpress MU doesn't set categories when exporting
  
  return array(
    'categories_map' => null,
    'categories_vocabulary' => null
    );
  
}

/**
 * Return vocabulary id of the $type provided or a new one if it doesn't exist
 * @return integer new taxonomy id
 */

function wordpress_import_create_vocabulary($type, $vocabulary_data) {
  // Check if a category for Wordpress already exists
  
  $vocabulary_id = variable_get('wordpress_import_'. $type, 0);
  
  if ($vocabulary_id) {
    $vocabulary = (array)taxonomy_vocabulary_load($vocabulary_id);
  }
  
  // Create vocabulary if it doesn't exist

  if (!$vocabulary) {
    $vocabulary_data['module'] = 'wordpress_import';
    taxonomy_save_vocabulary($vocabulary_data);
    variable_set('wordpress_import_'. $type, $vocabulary_data['vid']);
    $vocabulary = $vocabulary_data;
  }

  return $vocabulary['vid'];
}

function wordpress_import_get_terms($vid) {
  $db_result = db_query("SELECT t.tid, t.* FROM {term_data} t WHERE t.vid = %d", $vid);
    
  $result = array();
  while ($term = db_fetch_object($db_result)) {
    $result[$term->name] = $term->tid;
  }

  return $result;
}

/**
 * Import posts and create clean urls if required
 * @param array $wordpress wordpress data
 * @param array $params parameters
 */

function wordpress_import_posts($wordpress, $params) {
  $params['format'] = wordpress_import_get_format();

  foreach ($wordpress['posts'] as $post_value) {
    $post_info = wordpress_import_post($post_value, $params);

    if ($post_info && $params['alias']) {
      $link = wordpress_import_get_tag($post_value, 'link');
      $link = substr($link, strlen($wordpress['link']));
      $link = rtrim($link, '/');
      path_set_alias('node/'. $post_info['nid'], $link);
    }
  }
}

/**
 * Import a post
 * @param array $post post data
 * @param array $params parameters
 * @return array post infos
 */

function wordpress_import_post($post, $params) {
  $uid = $params['users_map'][wordpress_import_get_tag( $post, 'dc:creator' )];

  // Don't import the post if the user hasn't been selected

  if (!ctype_digit($uid)) {
    return FALSE;
  }
    
  // Get post type : blog entry (post) or page
  // Posts are promoted in front page but not the pages
  
  $post_type = wordpress_import_get_tag($post, 'wp:post_type');

  switch ($post_type) {
    case 'post':
    $type = $params['blog_type'];
    $promote = '1';
    break;
    case 'page':
    $type = 'page';
    $promote = '0';
    break;
    default:
    return;
  }

  // Parsing categories

  preg_match_all('|<category>(.*?)</category>|is', $post, $categories);
  $categories = $categories[1];

  foreach ($categories as $key => $value) {
    $category = str_replace(array('<![CDATA[', ']]>'), '', $value);
    $drupal_category = $params['categories_map'][$category];

    if (!empty($drupal_category)) {
        $drupal_categories[$params['categories_vocabulary']][] = $drupal_category;
    }
    else {
      $drupal_tags[] = $category;
    }
  }

  // Parsing tags

  preg_match_all('|<category domain=\"tag\">(.*?)</category>|is', $post, $tags);

  $tags=$tags[1];

  foreach ($tags as $key => $value) {
    $drupal_tags[] = str_replace(array('<![CDATA[', ']]>'), '', $value);
  }

  if (is_array($drupal_tags)) {
    $drupal_categories['tags'][$params['tags_vocabulary']] = join(',', $drupal_tags);
  }
  
  // Defining status
  
  switch (wordpress_import_get_tag($post, 'wp:status')) {
    case 'draft':
    case 'private':
      $status = FALSE;
    break;
    default:
      $status = TRUE;
  } 

  // Inserting node

  $timestamp = strtotime(wordpress_import_get_tag($post, 'wp:post_date'));
  $content = wordpress_import_get_tag($post, 'content:encoded');
  $content = str_replace('<!--more-->', '<!--break-->', $content);

  $node = array(
    'type' => $type,
    'teaser' => node_teaser($content, $params['format']),
    'uid' => $uid,
    'title' => html_entity_decode(wordpress_import_get_tag($post, 'title'), ENT_COMPAT, 'UTF-8'),
    'body' => $content,
    'format' => $params['format'],
    'status' => $status,
    'promote' => $promote,
    'created' => $timestamp,
    'changed' => $timestamp,
    'comment' => wordpress_import_get_tag($post, 'wp:comment_status')=='open'?COMMENT_NODE_READ_WRITE:COMMENT_NODE_READ_ONLY,
    'taxonomy' => $drupal_categories
    );

  $node = (object)$node;
  node_save($node);
  $_SESSION['wordpress_import']['report']['@created_posts'] ++;
  $return['nid'] = $node->nid;

  taxonomy_node_save($node->nid, $drupal_categories);

  drupal_get_messages(); // Clear message queue to prevent filling of $_SESSION table

  // Importing comments

  $drupal_comment = array();
  preg_match_all('|<wp:comment>(.*?)</wp:comment>|is', $post, $comments);
  $comments = $comments[1];

  $comment_id = 0;

  foreach ($comments as $comment_key => $comment) {
    switch (wordpress_import_get_tag($comment, 'wp:comment_approved')) {
      case '0':
      $status = COMMENT_NOT_PUBLISHED;
      break;
      case '1':
      $status = COMMENT_PUBLISHED;
      break;
      case 'spam':
      continue 2;
    }

    $timestamp = strtotime(wordpress_import_get_tag($comment, 'wp:comment_date'));
    $comment_content = wordpress_import_get_tag($comment, 'wp:comment_content');

    switch (wordpress_import_get_tag($comment, 'wp:comment_type')) {
      case 'trackback':
        db_query(
          "INSERT INTO {trackback_received} (nid, created, site, name, subject, url, excerpt, status) VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', %d)",
        $node->nid,
        $timestamp,
        wordpress_import_get_tag($comment, 'wp:comment_author_IP'),
        decode_entities(strip_tags(wordpress_import_get_tag($comment, 'wp:comment_author'))),
        trim(truncate_utf8(decode_entities(strip_tags($comment_content)), 29, TRUE)),
        wordpress_import_get_tag($comment, 'wp:comment_author_url'),
        $comment_content,
        1);
        
        db_query("INSERT INTO {trackback_received} (nid, created, site, name, subject, url, excerpt, status) VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', %d)", $trackback->nid, $trackback->created, $trackback->site, $trackback->name, $trackback->subject, $trackback->url, $trackback->excerpt, $trackback->status);
        
        break;
      
      default:
        $drupal_comment[$timestamp] = array(
          'nid' => $node->nid,
          'pid' => 0,
          'comment' => $comment_content,
          'subject' => trim(truncate_utf8(decode_entities(strip_tags($comment_content)), 29, TRUE)),
          'name' => decode_entities(strip_tags(wordpress_import_get_tag($comment, 'wp:comment_author'))),
          'mail' => wordpress_import_get_tag($comment, 'wp:comment_author_email'),
          'homepage' => wordpress_import_get_tag($comment, 'wp:comment_author_url'),
          'timestamp' => $timestamp,
          'hostname' => wordpress_import_get_tag($comment, 'wp:comment_author_IP'),
          'status' => $status,
          'format' => $param['format']
          );
        break;
    }
  }

  // Sorting comments by timestamp so the thread won't be messed up in Drupal

  ksort($drupal_comment);

  // Saving comments

  foreach ($drupal_comment as $drupal_comment_key => $drupal_comment_value) {
    $comment_id = comment_save($drupal_comment_value);
    drupal_get_messages(); // Clear message queue to prevent filling of $_SESSION table
    $_SESSION['wordpress_import']['report']['@created_comments']++;
    // Updating fields that haven't been set by comment_save

    db_query("UPDATE {comments} SET hostname= '%s', timestamp= '%d', status= '%d' WHERE cid= %d", $drupal_comment_value['hostname'], $drupal_comment_value['timestamp'], $drupal_comment_value['status'], $comment_id);
  }

  return $return;
}

// Drupal help functions

 /**
  * 
  */

function wordpress_import_directory() {
  return file_create_path(file_directory_path() .'/'.'wordpress');
}

/**
 * Get list of users for the import form
 * @return array users
 */

function wordpress_import_drupal_users_list($show_default = TRUE) {
  $sql = "SELECT * FROM {users} ORDER BY name ASC";
  $result =  db_query($sql);

  if ($show_default) {
    $users['default_user_mapping'] = t('Default user mapping');
  }
  
  $users['create_new_user'] = t('Create new user');
  $users['do_not_import'] = t('Do not import');
  

  while ($user = db_fetch_array($result)) {
    if (!empty($user['uid'])) {
      $users[$user['uid']] = $user['name'];
    }
  }
  return $users;
}

 /**
  * Create an input format for wordpress or fetch an existing one.
  * @return integer format id
  */

function wordpress_import_get_format() {
  $format_id = variable_get('wordpress_import_format_id', 0);
  
  if (!$format_id) {
    db_query("INSERT INTO {filter_formats} (name,cache) VALUES ('%s',1)", 'Wordpress format');
    $format_id = db_result(db_query("SELECT MAX(format) AS format FROM {filter_formats}"));
    db_query("INSERT INTO {filters} (format, module, delta, weight) VALUES (%d, '%s', %d, %d)", $format_id, 'filter', 2, 0);
    variable_set('wordpress_import_format_id', $format_id);
  }

  return $format_id;
}

// Simpletest hook

/**
* Implementation of hook_simpletest().
*/
function wordpress_import_simpletest() {
  $module_name = 'wordpress_import';
  $dir = drupal_get_path('module', $module_name) .'/tests';
  $tests = file_scan_directory($dir, '\.test$');
  return array_keys($tests);
}

// Wordpress importing functions
// Adapted from wordpress code (http://wordpress.org/) released under GNU GENERAL PUBLIC LICENSE

 /**
  * Parse a WXR file into an array
  * @param string $file file path
  * @return array wordpress data
  */

function wordpress_import_items($file) {
  $wordpress = array();

  $fp = fopen($file, 'r');
  if ($fp) {
    while ( !feof($fp) ) {
      $importline = rtrim(fgets($fp));
      if ( FALSE !== strpos($importline, '<wp:category>') ) {
        preg_match('|<wp:category>(.*?)</wp:category>|is', $importline, $category);
        $wordpress['categories'][] = $category[1];
        continue;
      }
      if ( FALSE !== strpos($importline, '<wp:tag>') ) {
        preg_match('|<wp:tag>(.*?)</wp:tag>|is', $importline, $tag);
        $wordpress['tags'][] = $tag[1];
        continue;
      }
      if ( FALSE !== strpos($importline, '<item>') ) {
        $wordpress['posts'][$num] = '';
        $doing_entry = TRUE;
        continue;
      }
      if ( FALSE !== strpos($importline, '</item>') ) {
        $num++;
        $doing_entry = FALSE;
        continue;
      }
      
      if ( $doing_entry ) {
        $wordpress['posts'][$num] .= $importline ."\n";
      }
      else {
        if ( FALSE !== strpos($importline, '<link>') ) {
          preg_match('|<link>(.*?)</link>|is', $importline, $link);
          $wordpress['link'] = $link[1];
          if (substr($wordpress['link'], -1) != '/') {
            $wordpress['link'] .= '/';
          }
        }
      }
    }
    fclose($fp);
  }

  return $wordpress;
}

/**
 * Import author from wordpress data
 *
 * @param array $wordpress wordpress data
 * @return array author list
 */


function wordpress_import_get_users($wordpress) {
  $temp = array();

  foreach ($wordpress['posts'] as $post) {
    if ('' != trim($post)) {
      ++ $i;
      $author_name = wordpress_import_get_tag( $post, 'dc:creator' );
      $author[$author_name] = $author_name;
    }
  }

  return $author;
}

/**
 * Extract data from a xml tag
 *
 * @param string $string xml snippet
 * @param string $tag tag to extract
 * @return string content of the tag
 */

function wordpress_import_get_tag($string, $tag) {
  preg_match("|<$tag.*?>(.*?)</$tag>|is", $string, $return);
  $r = preg_replace('|^<!\[CDATA\[(.*)\]\]>$|s', '$1', $return[1]);
  if ($r === NULL) {
    $r = $return[1];
  }
  // $return = $wpdb->escape( trim( $return ) );
  // TODO : echapper le tag
  return $r;
}
